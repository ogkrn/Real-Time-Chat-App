datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  Int              @id @default(autoincrement())
  username            String           @unique
  email               String           @unique
  password            String
  createdAt           DateTime         @default(now())
  messages            Message[]
  sentFriendships     Friendship[]     @relation("SentFriendships")
  receivedFriendships Friendship[]     @relation("ReceivedFriendships")
  createdGroups       Group[]          @relation("GroupCreator")
  groupMemberships    GroupMember[]
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  recipientId Int?     // For direct messages
  groupId     Int?     // For group messages
  group       Group?   @relation(fields: [groupId], references: [id])
  fileUrl     String?  // URL/path to uploaded file
  fileName    String?  // Original file name
  fileType    String?  // MIME type (image/jpeg, video/mp4, etc.)
  fileSize    Int?     // File size in bytes
}

model Friendship {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("SentFriendships", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedFriendships", fields: [receiverId], references: [id])
  
  @@unique([senderId, receiverId])
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  avatarUrl   String?       // Optional group avatar
  creatorId   Int
  creator     User          @relation("GroupCreator", fields: [creatorId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     GroupMember[]
  messages    Message[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  groupId   Int
  userId    Int
  role      String   @default("member") // member, admin
  joinedAt  DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([groupId, userId])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  
  @@index([email])
  @@index([token])
}
